# 1074-number-of-submatrices-that-sum-to-target


Try it on <a href='https://leetcode.com/problems/1074-number-of-submatrices-that-sum-to-target'>leetcode</a>

## Description
<div class="description">
<div><p>Given a <code>matrix</code>&nbsp;and a <code>target</code>, return the number of non-empty submatrices that sum to <font face="monospace">target</font>.</p>

<p>A submatrix <code>x1, y1, x2, y2</code> is the set of all cells <code>matrix[x][y]</code> with <code>x1 &lt;= x &lt;= x2</code> and <code>y1 &lt;= y &lt;= y2</code>.</p>

<p>Two submatrices <code>(x1, y1, x2, y2)</code> and <code>(x1', y1', x2', y2')</code> are different if they have some coordinate&nbsp;that is different: for example, if <code>x1 != x1'</code>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/02/mate1.jpg" style="width: 242px; height: 242px;">
<pre><strong>Input:</strong> matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
<strong>Output:</strong> 4
<strong>Explanation:</strong> The four 1x1 submatrices that only contain 0.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> matrix = [[1,-1],[-1,1]], target = 0
<strong>Output:</strong> 5
<strong>Explanation:</strong> The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> matrix = [[904]], target = 0
<strong>Output:</strong> 0
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= matrix.length &lt;= 100</code></li>
	<li><code>1 &lt;= matrix[0].length &lt;= 100</code></li>
	<li><code>-1000 &lt;= matrix[i] &lt;= 1000</code></li>
	<li><code>-10^8 &lt;= target &lt;= 10^8</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        return self.optimal(matrix, target)
    
    # Time Complexity: O((m*n)^3)
    # Space Complexity: O(1)
    def bruteforce(self, matrix: List[List[int]], target: int) -> int:
        res = 0
        m = len(matrix)
        n = len(matrix[0])
        
        def submatrixSum(rowStart, rowSize, colStart, colSize):
            subMatrixSum = 0
            for i in range(rowStart, rowstart+rowSize):
                for j in range(colStart, colStart+colSize):
                    subMatrixSum += matrix[i][j]
            return subMatrixSum
        
        for rowStart in range(m):
            for rowSize in range(1, m+1):
                for colStart in range(n):
                    for colSize in range(1, n+1):
                        if submatrixSum(rowStart, rowSize, colStart, colSize) == target:
                            res += 1
        return res
    
    # Time Complexity: O((m*n)^2)
    # Space Complexity: O(m*n)
    def better(self, matrix: List[List[int]], target: int) -> int:
        res = 0
        m = len(matrix)
        n = len(matrix[0])
        
        for row in range(m):
            for col in range(1,n):
                matrix[row][col] += matrix[row][col-1]
        
        for colstart in range(n):
            for colend in range(colstart, n):
                for rowstart in range(m):
                    sub_sum = 0
                    for rowend in range(rowstart, m):
                        sub_sum += matrix[rowend][colend] - matrix[rowend][colstart-1] if colstart else 0
                        if sub_sum == target:
                            res += 1
        return res
    
    # Time Complexity: O((m^2*n))
    # Space Complexity: O(m*n)
    def optimal(self, matrix: List[List[int]], target: int) -> int:
        res = 0
        m = len(matrix)
        n = len(matrix[0])
        
        for row in range(m):
            for col in range(1,n):
                matrix[row][col] += matrix[row][col-1]
        
        
        
        for colstart in range(n):
            for colend in range(colstart, n):
                cur_sum = 0
                hash_map = {0: 1}
                for rowstart in range(m):
                    cur_sum += matrix[rowstart][colend] - (matrix[rowstart][colstart-1] if colstart>0 else 0)
                    res += hash_map.get(cur_sum - target,0)
                    hash_map[cur_sum] = hash_map.get(cur_sum,0) + 1
                    
        return res

```