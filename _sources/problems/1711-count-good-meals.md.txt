# 1711-count-good-meals


Try it on <a href='https://leetcode.com/problems/1711-count-good-meals'>leetcode</a>

## Description
<div class="description">
<div><p>A <strong>good meal</strong> is a meal that contains <strong>exactly two different food items</strong> with a sum of deliciousness equal to a power of two.</p>

<p>You can pick <strong>any</strong> two different foods to make a good meal.</p>

<p>Given an array of integers <code>deliciousness</code> where <code>deliciousness[i]</code> is the deliciousness of the <code>i<sup>​​​​​​th</sup>​​​​</code>​​​​ item of food, return <em>the number of different <strong>good meals</strong> you can make from this list modulo</em> <code>10<sup>9</sup> + 7</code>.</p>

<p>Note that items with different indices are considered different even if they have the same deliciousness value.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> deliciousness = [1,3,5,7,9]
<strong>Output:</strong> 4
<strong>Explanation: </strong>The good meals are (1,3), (1,7), (3,5) and, (7,9).
Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> deliciousness = [1,1,1,3,3,3,7]
<strong>Output:</strong> 15
<strong>Explanation: </strong>The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= deliciousness.length &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= deliciousness[i] &lt;= 2<sup>20</sup></code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def __init__(self):
        self.mod = (10**9) + 7
        self.targets = [2**i for i in range(22)]

    def countPairs(self, deliciousness: List[int]) -> int:
        return self.hashing(deliciousness)

    # Time Complexity: O(n^2)
    # space Complexity: O(1)
    def bruteforce(self, deliciousness: List[int]) -> int:
        n = len(deliciousness)
        cnt = 0

        for i in range(n):
            for j in range(i + 1, n):
                target = deliciousness[i] + deliciousness[j]
                if self.isPowerOfTwo(target):
                    cnt = cnt % self.mod + 1

        return cnt % self.mod

    def isPowerOfTwo(self, x):
        return x != 0 and not (x & x - 1)

    # Time Complexity: O(n)
    # space Complexity: O(n)
    def hashing(self, deliciousness: List[int]) -> int:
        n = len(deliciousness)
        cnt = 0
        FreqhashTable = defaultdict(int)

        for i in range(n):
            for target in self.targets:
                exp_deliciousness = target - deliciousness[i]
                if exp_deliciousness in FreqhashTable:
                    cnt += FreqhashTable[exp_deliciousness]
            FreqhashTable[deliciousness[i]] += 1

        return cnt % self.mod

```