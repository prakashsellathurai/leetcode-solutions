# 338-counting-bits


Try it on <a href='https://leetcode.com/problems/338-counting-bits'>leetcode</a>

## Description
<div class="description">
<div><p>Given an integer <code>n</code>, return <em>an array </em><code>ans</code><em> of length </em><code>n + 1</code><em> such that for each </em><code>i</code><em> </em>(<code>0 &lt;= i &lt;= n</code>)<em>, </em><code>ans[i]</code><em> is the <strong>number of </strong></em><code>1</code><em><strong>'s</strong> in the binary representation of </em><code>i</code>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> n = 2
<strong>Output:</strong> [0,1,1]
<strong>Explanation:</strong>
0 --&gt; 0
1 --&gt; 1
2 --&gt; 10
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> n = 5
<strong>Output:</strong> [0,1,1,2,1,2]
<strong>Explanation:</strong>
0 --&gt; 0
1 --&gt; 1
2 --&gt; 10
3 --&gt; 11
4 --&gt; 100
5 --&gt; 101
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>0 &lt;= n &lt;= 10<sup>5</sup></code></li>
</ul>

<p>&nbsp;</p>
<p><strong>Follow up:</strong></p>

<ul>
	<li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li>
	<li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def countBits(self, n: int) -> List[int]:
        return self.dynamicprogramming(n)

    # Time Complexity :O(nlogn)
    # Space Complexity: O(n)
    def naive(self, n: int) -> List[int]:
        return [self.countones(num) for num in range(0, n + 1)]

    # Time Complexity :O(n)
    # Space Complexity: O(n)
    def dynamicprogramming(self, n: int) -> List[int]:
        dp = [0] * (n + 1)
        offset = 1
        for index in range(1, n + 1):
            if index == offset * 2:
                offset *= 2
            dp[index] = dp[index - offset] + 1
        return dp

    def countones(self, num):
        cnt = 0
        while num:
            cnt += 1
            num &= num - 1
        return cnt

```