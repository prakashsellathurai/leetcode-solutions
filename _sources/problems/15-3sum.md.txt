# 15-3sum


Try it on <a href='https://leetcode.com/problems/15-3sum'>leetcode</a>

## Description
<div class="description">
<div><p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>

<p>Notice that the solution set must not contain duplicate triplets.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<pre><strong>Input:</strong> nums = [-1,0,1,2,-1,-4]
<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]
</pre><p><strong>Example 2:</strong></p>
<pre><strong>Input:</strong> nums = []
<strong>Output:</strong> []
</pre><p><strong>Example 3:</strong></p>
<pre><strong>Input:</strong> nums = [0]
<strong>Output:</strong> []
</pre>
<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>0 &lt;= nums.length &lt;= 3000</code></li>
	<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        return self.KSum(nums, 0, 3)
    
    def KSum(self, nums, target, k):
        
        n = len(nums)
        
        if not n:
            return []
        
        average = target // k
        
        if average < nums[0] or average > nums[-1]:
            return []
        
        if k == 2:
            return self.twosum(nums, target)
        
        res = []
        
        for i in range(n):
            if i == 0 or nums[i] != nums[i-1]:
                for subset in  self.KSum(nums[i+1:], target-nums[i],k-1):
                    res.append([nums[i]]+subset)
        
        return res
        
    def twosum(self, nums, target):
        lo = 0
        n = len(nums)
        hi = n-1
        res = []
        
        while lo < hi:
            curr_sum = nums[lo] + nums[hi]
            if curr_sum < target or (lo > 0 and nums[lo] == nums[lo - 1]):
                lo += 1
            elif curr_sum > target or (hi < len(nums) - 1 and nums[hi] == nums[hi + 1]):
                hi -= 1
            else:
                res.append([nums[lo], nums[hi]])
                lo += 1
                hi -= 1
        return res
                
        
```