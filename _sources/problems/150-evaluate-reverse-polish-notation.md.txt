# 150-evaluate-reverse-polish-notation


Try it on <a href='https://leetcode.com/problems/150-evaluate-reverse-polish-notation'>leetcode</a>

## Description
<div class="description">
<div><p>Evaluate the value of an arithmetic expression in <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank">Reverse Polish Notation</a>.</p>

<p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>. Each operand may be an integer or another expression.</p>

<p><strong>Note</strong> that division between two integers should truncate toward zero.</p>

<p>It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> tokens = ["2","1","+","3","*"]
<strong>Output:</strong> 9
<strong>Explanation:</strong> ((2 + 1) * 3) = 9
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> tokens = ["4","13","5","/","+"]
<strong>Output:</strong> 6
<strong>Explanation:</strong> (4 + (13 / 5)) = 6
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
<strong>Output:</strong> 22
<strong>Explanation:</strong> ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li>
	<li><code>tokens[i]</code> is either an operator: <code>"+"</code>, <code>"-"</code>, <code>"*"</code>, or <code>"/"</code>, or an integer in the range <code>[-200, 200]</code>.</li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    """
    refer https://en.wikipedia.org/wiki/Shunting-yard_algorithm

    iterate through the array if numbers are found push them to stack
    if an operator is found pop last two elements from stack and do that op

    last standing number is the vealuated result

    Time Complexity: O(n)
    Space Complexity: O(n)
    """

    def evalRPN(self, tokens: List[str]) -> int:
        s = []

        for token in tokens:
            if token in "+-*/":
                op1 = s.pop()
                op2 = s.pop()
                s.append(self.eval(op1, op2, token))
            else:
                s.append(int(token))
        return s[-1]

    def eval(self, op1, op2, op):
        print(op1, op2, op)
        if op == "+":
            return op1 + op2
        elif op == "-":
            return op2 - op1
        elif op == "*":
            return op1 * op2
        elif op == "/":
            return int(op2 / op1)

```