# 509-fibonacci-number


Try it on <a href='https://leetcode.com/problems/509-fibonacci-number'>leetcode</a>

## Description
<div class="description">
<div><p>The <b>Fibonacci numbers</b>, commonly denoted <code>F(n)</code> form a sequence, called the <b>Fibonacci sequence</b>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>

<pre>F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n &gt; 1.
</pre>

<p>Given <code>n</code>, calculate <code>F(n)</code>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> n = 2
<strong>Output:</strong> 1
<strong>Explanation:</strong> F(2) = F(1) + F(0) = 1 + 0 = 1.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> n = 3
<strong>Output:</strong> 2
<strong>Explanation:</strong> F(3) = F(2) + F(1) = 1 + 1 = 2.
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> n = 4
<strong>Output:</strong> 3
<strong>Explanation:</strong> F(4) = F(3) + F(2) = 2 + 1 = 3.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>0 &lt;= n &lt;= 30</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def fib(self, n: int) -> int:
        return self.Iterativelesspace(n)

    # Time Complexity: O(2^n)
    # Space Complexity: O(n)
    def Recursive(self, n):
        if n <= 1:
            return n
        else:
            return self.Recursive(n - 1) + self.Recursive(n - 2)

    # Time Complexity: O(n)
    # Space Complexity: O(n)
    def Iterative(self, n):
        if n <= 1:
            return n
        fib = [0] * (n + 1)

        fib[1] = 1

        for i in range(2, n + 1):
            fib[i] = fib[i - 1] + fib[i - 2]

        return fib[n]

    # Time Complexity: O(n)
    # Space Complexity: O(1)
    def Iterativelesspace(self, n):
        if n <= 1:
            return n

        prev2, prev1 = 0, 1

        for i in range(2, n + 1):
            cur = prev2 + prev1
            prev2 = prev1
            prev1 = cur

        return cur

```