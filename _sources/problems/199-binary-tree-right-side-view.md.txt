# 199-binary-tree-right-side-view


Try it on <a href='https://leetcode.com/problems/199-binary-tree-right-side-view'>leetcode</a>

## Description
<div class="description">
<div><p>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return <em>the values of the nodes you can see ordered from top to bottom</em>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/14/tree.jpg" style="width: 401px; height: 301px;">
<pre><strong>Input:</strong> root = [1,2,3,null,5,null,4]
<strong>Output:</strong> [1,3,4]
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> root = [1,null,3]
<strong>Output:</strong> [1,3]
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> root = []
<strong>Output:</strong> []
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>
	<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        return self.dfs(root)
        
    # Time Complexity: O(n)
    # Space Complexity: O(n)
    def levelorder(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        q = deque([root])
        while q:
            n = len(q)
            for i in range(n):
                node = q.popleft()
                if  i== n-1:
                    res.append(node.val)
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
        return res
    
    # Time Complexity: O(n)
    # Space Complexity: O(H)
    def dfs(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        heights = {}
        def preorder(node, h):
            if node:
                if h not in heights:
                    heights[h] = True
                    res.append(node.val)
                preorder(node.right, h+1)
                preorder(node.left, h+1)
                
                
        preorder(root,0)
        return res
        
        
```