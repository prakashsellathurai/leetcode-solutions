# 1696-jump-game-vi


Try it on <a href='https://leetcode.com/problems/1696-jump-game-vi'>leetcode</a>

## Description
<div class="description">
<div><p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>k</code>.</p>

<p>You are initially standing at index <code>0</code>. In one move, you can jump at most <code>k</code> steps forward without going outside the boundaries of the array. That is, you can jump from index <code>i</code> to any index in the range <code>[i + 1, min(n - 1, i + k)]</code> <strong>inclusive</strong>.</p>

<p>You want to reach the last index of the array (index <code>n - 1</code>). Your <strong>score</strong> is the <strong>sum</strong> of all <code>nums[j]</code> for each index <code>j</code> you visited in the array.</p>

<p>Return <em>the <strong>maximum score</strong> you can get</em>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> nums = [<u>1</u>,<u>-1</u>,-2,<u>4</u>,-7,<u>3</u>], k = 2
<strong>Output:</strong> 7
<strong>Explanation:</strong> You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> nums = [<u>10</u>,-5,-2,<u>4</u>,0,<u>3</u>], k = 3
<strong>Output:</strong> 17
<strong>Explanation:</strong> You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
<strong>Output:</strong> 0
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li>
	<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def maxResult(self, nums: List[int], k: int) -> int:
        return self.optimal(nums, k)
    
    # Time Complexity: O(n*k)
    # Space Complexity: O(n*k)
    def naive(self, nums: List[int], k: int) -> int:
        n = len(nums)
        @cache
        def dfs(i):
            if  i >= n-1:
                return nums[i]
            
            res = float('-inf')
            for j in range(i+1,min(n-1,i+k)+1):
                include = dfs(j)
                res = max(res,nums[i]+include)
            return res if res != float('-inf') else 0
                
        return dfs(0)
    
    
    # Time Complexity: O(nlogk)
    # Space Complexity: O(n)
    def better(self, nums: List[int], k: int) -> int:
        n = len(nums)
        dp = [0] * (n+1)
        q = []
        heapq.heapify(q)
        for i in range(n-1, -1, -1):
            sum_so_far = float('-inf')
            while q and q[0][1] > min(n-1,i+k):
                heapq.heappop(q)
            if q:
                sum_so_far = max(sum_so_far, -q[0][0])
            dp[i] = nums[i] + (sum_so_far if sum_so_far != float('-inf') else 0)
            heapq.heappush(q,(-dp[i],i))
        return dp[0]
    
    
        
    # Time Complexity: O(n)
    # Space Complexity: O(n)
    def optimal(self, nums: List[int], k: int) -> int:
        deq, n = deque([0]), len(nums)

        for i in range(1, n):
            while deq and deq[0] < i - k: deq.popleft()
            nums[i] += nums[deq[0]]   
            while deq and nums[i] >= nums[deq[-1]]: deq.pop()
            deq.append(i)
            
        return nums[-1]
        
```