# 322-coin-change


Try it on <a href='https://leetcode.com/problems/322-coin-change'>leetcode</a>

## Description
<div class="description">
<div><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p>

<p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p>

<p>You may assume that you have an infinite number of each kind of coin.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> coins = [1,2,5], amount = 11
<strong>Output:</strong> 3
<strong>Explanation:</strong> 11 = 5 + 5 + 1
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> coins = [2], amount = 3
<strong>Output:</strong> -1
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> coins = [1], amount = 0
<strong>Output:</strong> 0
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= coins.length &lt;= 12</code></li>
	<li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li>
	<li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        return self.dp(coins, amount)

    # Time Complexity: O(S^n)
    # Space Complexity: O(n)
    def bruteforce(self, coins: List[int], amount: int) -> int:
        def coinchange(idx, coins, amount):
            if amount == 0:
                return 0

            if idx < len(coins) and amount > 0:
                maxVal = amount / coins[idx]
                mincost = sys.maxsize

                for x in range(maxVal + 1):
                    if amount >= x * coins[idx]:
                        res = coinchange(
                            idx + 1, coins, amount - x * coins[idx])
                        if res != -1:
                            mincost = min(mincost, res + x)

                return mincost if mincost < sys.maxsize else -1

            return -1

        return coinchange(0, coins, amount)

    # Time Complexity: O(S*n)
    # Space Complexity: O(S)
    @cache
    def topdown(self, amount: int) -> int:
        if amount < 0:
            return -1
        if amount == 0:
            return 0

        min_ = sys.maxsize
        for coin in self.coins:
            res = self.topdown(amount - coin)
            if res >= 0 and res < min_:
                min_ = res + 1

        return -1 if min_ == sys.maxsize else min_

    # Time Complexity: O(S*n)
    # Space Complexity: O(S)
    def dp(self, coins: List[int], amount: int) -> int:
        dp = [float("inf")] * (amount + 1)
        dp[0] = 0

        for coin in coins:
            for x in range(coin, amount + 1):
                dp[x] = min(dp[x], dp[x - coin] + 1)
        return dp[amount] if dp[amount] != float("inf") else -1

```