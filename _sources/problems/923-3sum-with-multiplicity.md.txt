# 923-3sum-with-multiplicity


Try it on <a href='https://leetcode.com/problems/923-3sum-with-multiplicity'>leetcode</a>

## Description
<div class="description">
<div><p>Given an integer array <code>arr</code>, and an integer <code>target</code>, return the number of tuples <code>i, j, k</code> such that <code>i &lt; j &lt; k</code> and <code>arr[i] + arr[j] + arr[k] == target</code>.</p>

<p>As the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> arr = [1,1,2,2,3,3,4,4,5,5], target = 8
<strong>Output:</strong> 20
<strong>Explanation: </strong>
Enumerating by the values (arr[i], arr[j], arr[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> arr = [1,1,2,2,2,2], target = 5
<strong>Output:</strong> 12
<strong>Explanation: </strong>
arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>3 &lt;= arr.length &lt;= 3000</code></li>
	<li><code>0 &lt;= arr[i] &lt;= 100</code></li>
	<li><code>0 &lt;= target &lt;= 300</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def __init__(self):
        self.modulo = 10**9 + 7

    def threeSumMulti(self, arr: List[int], target: int) -> int:
        return self.threepointer(arr, target)

    # run three  nested loops with indcies i,j,k ,i<j,k  and cnt it
    # Time Complexity: O(n^3)
    # Space Complexity: O(1)
    def bruteforce(self, arr: List[int], target: int) -> int:
        cnt = 0
        n = len(arr)

        for i in range(n):
            for j in range(i + 1, n):
                for k in range(j + 1, n):
                    if arr[i] + arr[j] + arr[k] == target:
                        cnt += 1
        return cnt % self.modulo

    def threepointer(self, arr: List[int], target: int) -> int:
        arr.sort()
        ans = 0
        n = len(arr)
        for i in range(n):
            T = target - arr[i]
            j, k = i + 1, n - 1

            while j < k:
                if arr[j] + arr[k] < T:
                    j += 1

                elif arr[j] + arr[k] > T:
                    k -= 1

                elif arr[j] != arr[k]:
                    left = right = 1
                    while j + 1 < k and arr[j] == arr[j + 1]:
                        left += 1
                        j += 1
                    while k - 1 > j and arr[k] == arr[k - 1]:
                        right += 1
                        k -= 1

                    ans += left * right
                    ans %= self.modulo
                    j += 1
                    k -= 1

                else:
                    ans += (k - j + 1) * (k - j) // 2
                    ans %= self.modulo
                    break

        return ans

```