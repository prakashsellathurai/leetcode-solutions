# 0212-word-search-ii


Try it on <a href='https://leetcode.com/problems/0212-word-search-ii'>leetcode</a>

## Description
<div class="description">
<p>Given an <code>m x n</code> <code>board</code>&nbsp;of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p>

<p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>

<p>&nbsp;</p>
<p><strong class="example">Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/11/07/search1.jpg" style="width: 322px; height: 322px;" />
<pre>
<strong>Input:</strong> board = [[&quot;o&quot;,&quot;a&quot;,&quot;a&quot;,&quot;n&quot;],[&quot;e&quot;,&quot;t&quot;,&quot;a&quot;,&quot;e&quot;],[&quot;i&quot;,&quot;h&quot;,&quot;k&quot;,&quot;r&quot;],[&quot;i&quot;,&quot;f&quot;,&quot;l&quot;,&quot;v&quot;]], words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]
<strong>Output:</strong> [&quot;eat&quot;,&quot;oath&quot;]
</pre>

<p><strong class="example">Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/11/07/search2.jpg" style="width: 162px; height: 162px;" />
<pre>
<strong>Input:</strong> board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], words = [&quot;abcb&quot;]
<strong>Output:</strong> []
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>m == board.length</code></li>
	<li><code>n == board[i].length</code></li>
	<li><code>1 &lt;= m, n &lt;= 12</code></li>
	<li><code>board[i][j]</code> is a lowercase English letter.</li>
	<li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li>
	<li><code>1 &lt;= words[i].length &lt;= 10</code></li>
	<li><code>words[i]</code> consists of lowercase English letters.</li>
	<li>All the strings of <code>words</code> are unique.</li>
</ul>

</div>

## Solution(Python)
```Python
from collections import defaultdict

class TrieNode:
    def __init__(self):
        self.child = defaultdict(TrieNode)
        self.end = False
    
class Trie:
    def __init__(self):
        self.root = TrieNode() # root Node

    def insert(self, word):
        node = self.root
        for c in word:
            node = node.child[c]
        node.end = True

    def search(self, word):
        node = self.root
        for c in ord:
            node = node.children.get(c)
            if not node:
                return False
        return node.end

class Solution:
    # trie 
    #  store words in trie 
    # run dfs to find the words
    # Time Complexity: O(k*L+M*N*L)
    # Space COmplexity: O(K*L+M*N)
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        # construct  phase
        result = []
        trie = Trie()
        rootNode = trie.root

        for word in words:
            trie.insert(word)

        # search phase
        n = len(board)
        m = len(board[0])

        for i in range(n):
            for j in range(m):
                # run dfs
                self.dfs(board, rootNode, i, j, "", result)
        return result

    def dfs(self, board, node, i, j, path, result):
        if node.end:
            result.append(path)
            node.end = False
        # stopping condition
        # out of boundary 
        # node doesn't exist
        if i<0 or i>=len(board) or j < 0 or j >= len(board[0]):
            return
        currentCell = board[i][j] # using temparry cell to track by current cell value
        node  = node.child.get(currentCell)
        if not node:
            return
        board[i][j] = "#" # visited cell
        
        # adjacent check on four directions
        self.dfs(board, node, i+1, j, path+currentCell, result)
        self.dfs(board, node, i-1, j, path+currentCell, result)
        self.dfs(board, node, i, j+1, path+currentCell, result)
        self.dfs(board, node, i, j-1, path+currentCell, result)
        # restore cell value
        board[i][j] = currentCell




        
```