# 7-reverse-integer


Try it on <a href='https://leetcode.com/problems/7-reverse-integer'>leetcode</a>

## Description
<div class="description">
<div><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p>

<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> x = 123
<strong>Output:</strong> 321
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> x = -123
<strong>Output:</strong> -321
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> x = 120
<strong>Output:</strong> 21
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def __init__(self):
        self.LOW = -(2**31)
        self.HIGH = 2**31

    def reverse(self, x: int) -> int:
        rev = 0
        isNeg = x < 0
        if isNeg:
            x *= -1
        while x != 0:
            pop = x % 10
            x //= 10

            if (rev >= self.HIGH // 10 or rev >= self.HIGH) and pop > 7:
                return 0
            if (rev <= self.LOW // 10 or rev <= self.LOW) and pop < -8:
                return 0

            rev = rev * 10 + pop
        if isNeg:
            rev *= -1
        if self.LOW < rev < self.HIGH:
            return rev
        else:
            return 0

```