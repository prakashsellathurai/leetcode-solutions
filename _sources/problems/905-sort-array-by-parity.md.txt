# 905-sort-array-by-parity


Try it on <a href='https://leetcode.com/problems/905-sort-array-by-parity'>leetcode</a>

## Description
<div class="description">
<div><p>Given an integer array <code>nums</code>, move all the even integers at the beginning of the array followed by all the odd integers.</p>

<p>Return <em><strong>any array</strong> that satisfies this condition</em>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> nums = [3,1,2,4]
<strong>Output:</strong> [2,4,3,1]
<strong>Explanation:</strong> The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> nums = [0]
<strong>Output:</strong> [0]
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 5000</code></li>
	<li><code>0 &lt;= nums[i] &lt;= 5000</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def sortArrayByParity(self, nums: List[int]) -> List[int]:
        return self.inPlace(nums)

    # Time Complexity: O(NlogN)
    # Space Complexity: O(N)
    def sorting(self, nums):
        nums.sort(key=lambda x: x % 2)
        return nums

    # Time Complexity: O(N)
    # Space Complexity: O(N)
    def twopass(self, nums):
        return [x for x in nums if not x % 2] + [x for x in nums if x % 2]

    # Time Complexity: O(N)
    # Space Complexity: O(1)
    def inPlace(self, nums):
        i, j = 0, len(nums) - 1
        while i < j:
            i_par = nums[i] % 2
            j_par = nums[j] % 2

            if i_par and not j_par:
                nums[i], nums[j] = nums[j], nums[i]

            if not i_par:
                i += 1
            if j_par:
                j -= 1

        return nums

```