# 576-out-of-boundary-paths


Try it on <a href='https://leetcode.com/problems/576-out-of-boundary-paths'>leetcode</a>

## Description
<div class="description">
<div><p>There is an <code>m x n</code> grid with a ball. The ball is initially at the position <code>[startRow, startColumn]</code>. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply <strong>at most</strong> <code>maxMove</code> moves to the ball.</p>

<p>Given the five integers <code>m</code>, <code>n</code>, <code>maxMove</code>, <code>startRow</code>, <code>startColumn</code>, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png" style="width: 500px; height: 296px;">
<pre><strong>Input:</strong> m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0
<strong>Output:</strong> 6
</pre>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png" style="width: 500px; height: 293px;">
<pre><strong>Input:</strong> m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1
<strong>Output:</strong> 12
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= m, n &lt;= 50</code></li>
	<li><code>0 &lt;= maxMove &lt;= 50</code></li>
	<li><code>0 &lt;= startRow &lt; m</code></li>
	<li><code>0 &lt;= startColumn &lt; n</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:
        return self.topdown(m, n, maxMove, startRow, startColumn)
        
     
    # Time Complexity: O(4^n)
    # Space Complexity: O(n)
    def bruteforce(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:
        if startRow == m or startColumn == n or startRow < 0 or startColumn < 0:
            return 1
        if maxMove == 0:
            return 0
        
        return self.bruteforce(m,n, maxMove - 1, startRow-1, startColumn) + self.bruteforce(m,n, maxMove - 1, startRow+1, startColumn) + self.bruteforce(m,n, maxMove - 1, startRow, startColumn-1) + self.bruteforce(m,n, maxMove - 1, startRow, startColumn+1)
    
    # Time Complexity: O(m*n*N)
    # Space Complexity: O(m*n*N)
    @cache
    def topdown(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:
        if startRow == m or startColumn == n or startRow < 0 or startColumn < 0:
            return 1
        if maxMove == 0:
            return 0
        
        return (self.topdown(m,n, maxMove - 1, startRow-1, startColumn) + self.topdown(m,n, maxMove - 1, startRow+1, startColumn) + self.topdown(m,n, maxMove - 1, startRow, startColumn-1) + self.topdown(m,n, maxMove - 1, startRow, startColumn+1)) % ((10**9) + 7)
    
```