# 45-jump-game-ii


Try it on <a href='https://leetcode.com/problems/45-jump-game-ii'>leetcode</a>

## Description
<div class="description">
<div><p>Given an array of non-negative integers <code>nums</code>, you are initially positioned at the first index of the array.</p>

<p>Each element in the array represents your maximum jump length at that position.</p>

<p>Your goal is to reach the last index in the minimum number of jumps.</p>

<p>You can assume that you can always reach the last index.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> nums = [2,3,1,1,4]
<strong>Output:</strong> 2
<strong>Explanation:</strong> The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> nums = [2,3,0,1,4]
<strong>Output:</strong> 2
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>
	<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def jump(self, nums: List[int]) -> int:
        steps = 0
        cur_End = 0
        maxReach = 0;
        for i in range(len(nums)):
            if(i>cur_End):
                steps+=1
                cur_End = maxReach;
             
            maxReach = max(maxReach, i+nums[i]);

        return steps;
```