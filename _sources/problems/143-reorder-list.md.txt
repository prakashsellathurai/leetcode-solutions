# 143-reorder-list


Try it on <a href='https://leetcode.com/problems/143-reorder-list'>leetcode</a>

## Description
<div class="description">
<div><p>You are given the head of a singly linked-list. The list can be represented as:</p>

<pre>L<sub>0</sub> → L<sub>1</sub> → … → L<sub>n - 1</sub> → L<sub>n</sub>
</pre>

<p><em>Reorder the list to be on the following form:</em></p>

<pre>L<sub>0</sub> → L<sub>n</sub> → L<sub>1</sub> → L<sub>n - 1</sub> → L<sub>2</sub> → L<sub>n - 2</sub> → …
</pre>

<p>You may not modify the values in the list's nodes. Only nodes themselves may be changed.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg" style="width: 422px; height: 222px;">
<pre><strong>Input:</strong> head = [1,2,3,4]
<strong>Output:</strong> [1,4,2,3]
</pre>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg" style="width: 542px; height: 222px;">
<pre><strong>Input:</strong> head = [1,2,3,4,5]
<strong>Output:</strong> [1,5,2,4,3]
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li>The number of nodes in the list is in the range <code>[1, 5 * 10<sup>4</sup>]</code>.</li>
	<li><code>1 &lt;= Node.val &lt;= 1000</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        def findmiddle(head):
            slow = head
            fast = head
            
            while fast and fast.next:
                slow = slow.next
                fast = fast.next.next
            return slow.next, slow
        
        first = head
        second_half_start,first_end = findmiddle(first)
        
        def reverse(head):
            cur = head
            prev = None
            while cur:
                nxt = cur.next
                cur.next = prev
                prev = cur
                cur = nxt
            return prev
        
        if first_end is None:
            return head
        first_end.next = None
        
        second_half_start = reverse(second_half_start)
        
        def merge(head1, head2):
            res = cur = ListNode(None)
            
            while head1 or head2:
                if head1:
                    res.next = head1
                    head1 = head1.next
                    res = res.next
                if head2:
                    res.next = head2
                    head2 = head2.next
                    res = res.next
                
            while head1:
                res.next = head1
                head1 = head1.next
                res = res.next
            while head2:
                res.next = head2
                head2 = head2.next
                res = res.next
            
            return res.next
            
            
        head = merge(first, second_half_start)
        
```