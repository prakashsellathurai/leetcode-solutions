# 268-missing-number


Try it on <a href='https://leetcode.com/problems/268-missing-number'>leetcode</a>

## Description
<div class="description">
<div><p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return <em>the only number in the range that is missing from the array.</em></p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> nums = [3,0,1]
<strong>Output:</strong> 2
<strong>Explanation:</strong> n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> nums = [0,1]
<strong>Output:</strong> 2
<strong>Explanation:</strong> n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> nums = [9,6,4,2,3,5,7,0,1]
<strong>Output:</strong> 8
<strong>Explanation:</strong> n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>n == nums.length</code></li>
	<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>
	<li><code>0 &lt;= nums[i] &lt;= n</code></li>
	<li>All the numbers of <code>nums</code> are <strong>unique</strong>.</li>
</ul>

<p>&nbsp;</p>
<p><strong>Follow up:</strong> Could you implement a solution using only <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime complexity?</p>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        return self.bitmanipulation(nums)

    # Time Complexity: O(nlogn)
    # Space Complexity: O(1)
    def sorting(self, nums):
        nums.sort()
        for i in range(len(nums)):
            if i != nums[i]:
                return i
        return len(nums)

    # Time Complexity: O(n)
    # Space Complexity: O(n)
    def hashing(self, nums):
        expected_hashmap = set(range(len(nums) + 1))
        actual_hashmap = set(nums)
        for num in expected_hashmap:
            if num not in actual_hashmap:
                return num

    # Time Complexity: O(n)
    # Space Complexity: O(1)
    def summate(self, nums):
        n = len(nums)
        expected_sum = n * (n + 1) // 2
        return expected_sum - sum(nums)

    # Time Complexity: O(n)
    # Space Complexity: O(1)
    def bitmanipulation(self, nums):
        res = 0
        for i in range(1, len(nums) + 1):
            res ^= i
        for num in nums:
            res ^= num
        return res

```