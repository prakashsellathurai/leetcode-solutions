# 1291-sequential-digits


Try it on <a href='https://leetcode.com/problems/1291-sequential-digits'>leetcode</a>

## Description
<div class="description">
<div><p>An&nbsp;integer has <em>sequential digits</em> if and only if each digit in the number is one more than the previous digit.</p>

<p>Return a <strong>sorted</strong> list of all the integers&nbsp;in the range <code>[low, high]</code>&nbsp;inclusive that have sequential digits.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<pre><strong>Input:</strong> low = 100, high = 300
<strong>Output:</strong> [123,234]
</pre><p><strong>Example 2:</strong></p>
<pre><strong>Input:</strong> low = 1000, high = 13000
<strong>Output:</strong> [1234,2345,3456,4567,5678,6789,12345]
</pre>
<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>10 &lt;= low &lt;= high &lt;= 10^9</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    #     def isSequential(self,num):
    #         candidate = num
    #         candidate,after = divmod(candidate,10)

    #         while  candidate > 0:
    #             candidate,before = divmod(candidate,10)

    #             if after != before+1:
    #                 return False
    #             after = before
    #         return True

    #     def sequentialDigits(self, low: int, high: int) -> List[int]:
    #         res = []

    #         for num in range(low,high):
    #             if self.isSequential(num):
    #                 res.append(num)

    #         return res
    # Time Complexity: O(M-N)

    def sequentialDigits(self, low, high):
        out = []
        string = "123456789"

        for i in range(len(str(low)), len(str(high)) + 1):
            for j in range(10 - i):
                num = int(string[j: j + i])
                if low <= num and num <= high:
                    out.append(num)

        return out


# Time Complexity: O(1)
# Space Complexity: O(1)

```