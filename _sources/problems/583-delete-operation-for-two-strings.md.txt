# 583-delete-operation-for-two-strings


Try it on <a href='https://leetcode.com/problems/583-delete-operation-for-two-strings'>leetcode</a>

## Description
<div class="description">
<div><p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of <strong>steps</strong> required to make</em> <code>word1</code> <em>and</em> <code>word2</code> <em>the same</em>.</p>

<p>In one <strong>step</strong>, you can delete exactly one character in either string.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> word1 = "sea", word2 = "eat"
<strong>Output:</strong> 2
<strong>Explanation:</strong> You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> word1 = "leetcode", word2 = "etco"
<strong>Output:</strong> 4
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li>
	<li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        n = len(word1)
        m = len(word2)

        dp = [0 for _ in range(n+1)]
        for i in range(m+1):
            temp = [0 for _ in range(n+1)]
            for j in range(n+1):
                if i == 0 or j==0:
                    temp[j] = i+ j
                elif word1[j-1] == word2[i-1]:
                    temp[j] = dp[j-1]
                else:
                    temp[j] = 1 + min(dp[j],temp[j-1])
            dp = temp
        
        return dp[n]
        
```