# 844-backspace-string-compare


Try it on <a href='https://leetcode.com/problems/844-backspace-string-compare'>leetcode</a>

## Description
<div class="description">
<div><p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if they are equal when both are typed into empty text editors</em>. <code>'#'</code> means a backspace character.</p>

<p>Note that after backspacing an empty text, the text will continue empty.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> s = "ab#c", t = "ad#c"
<strong>Output:</strong> true
<strong>Explanation:</strong> Both s and t become "ac".
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> s = "ab##", t = "c#d#"
<strong>Output:</strong> true
<strong>Explanation:</strong> Both s and t become "".
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> s = "a#c", t = "b"
<strong>Output:</strong> false
<strong>Explanation:</strong> s becomes "c" while t becomes "b".
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code><span>1 &lt;= s.length, t.length &lt;= 200</span></code></li>
	<li><span><code>s</code> and <code>t</code> only contain lowercase letters and <code>'#'</code> characters.</span></li>
</ul>

<p>&nbsp;</p>
<p><strong>Follow up:</strong> Can you solve it in <code>O(n)</code> time and <code>O(1)</code> space?</p>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        return self.twopointers(s, t)

    # Time Complexity: O(n+m)
    # Space Complexity: O(n+m)
    def stack(self, s, t):
        def build(string):
            ans = []
            for c in string:
                if c == "#":
                    ans.pop()
                else:
                    ans.append(c)
            return "".join(ans)

        return build(s) == build(t)

    # Time Complexity: O(n+m)
    # Space Complexity: O(1)
    def twopointers(self, s, t):
        def build(string):
            skip = 0
            for x in reversed(string):
                if x == "#":
                    skip += 1
                elif skip:
                    skip -= 1
                else:
                    yield x

        return all(x == y for x, y in zip_longest(build(s), build(t)))

```