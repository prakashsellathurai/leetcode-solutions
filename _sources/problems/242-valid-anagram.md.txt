# 242-valid-anagram


Try it on <a href='https://leetcode.com/problems/242-valid-anagram'>leetcode</a>

## Description
<div class="description">
<div><p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>t</code> <em>is an anagram of</em> <code>s</code><em>, and</em> <code>false</code> <em>otherwise</em>.</p>

<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<pre><strong>Input:</strong> s = "anagram", t = "nagaram"
<strong>Output:</strong> true
</pre><p><strong>Example 2:</strong></p>
<pre><strong>Input:</strong> s = "rat", t = "car"
<strong>Output:</strong> false
</pre>
<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></code></li>
	<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>
</ul>

<p>&nbsp;</p>
<p><strong>Follow up:</strong> What if the inputs contain Unicode characters? How would you adapt your solution to such a case?</p>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return self.match_by_unique_primeHash(s,t)
      
    # Time Complexity: O(n)
    # space complexity: O(n)
    def sort_and_match(self, s: str, t: str) -> bool:
        s = list(s)
        t = list(t)
        s.sort()
        t.sort()
        
        return len(s) == len(t) and s == t 
    
    # Time Complexity: O(n)
    # space complexity: O(k)
    def match_by_frequencyTable(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)
    
    # Time Complexity: O(n)
    # space complexity: O(k)
    def match_by_unique_primeHash(self, s: str, t: str) -> bool:
        def primes(n):
            from itertools import count, islice
            primes = (n for n in count(2) if all(n % d for d in range(2, n)))
            return islice(primes, 0, n)
        def letters():
            return list(map(chr, range(97, 123)))
        def Uniqueprimehash(s):
            prime_hash = {
                key: val for key, val in zip(letters(), primes(26))
            }
            hash = 1
            for c in s:
                hash *= prime_hash[c]
            return hash
                
            
        return Uniqueprimehash(s) == Uniqueprimehash(t)
            
```