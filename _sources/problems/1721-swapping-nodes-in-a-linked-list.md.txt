# 1721-swapping-nodes-in-a-linked-list


Try it on <a href='https://leetcode.com/problems/1721-swapping-nodes-in-a-linked-list'>leetcode</a>

## Description
<div class="description">
<div><p>You are given the <code>head</code> of a linked list, and an integer <code>k</code>.</p>

<p>Return <em>the head of the linked list after <strong>swapping</strong> the values of the </em><code>k<sup>th</sup></code> <em>node from the beginning and the </em><code>k<sup>th</sup></code> <em>node from the end (the list is <strong>1-indexed</strong>).</em></p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/21/linked1.jpg" style="width: 400px; height: 112px;">
<pre><strong>Input:</strong> head = [1,2,3,4,5], k = 2
<strong>Output:</strong> [1,4,3,2,5]
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> head = [7,9,6,6,7,8,3,0,9,5], k = 5
<strong>Output:</strong> [7,9,6,6,8,7,3,0,9,5]
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li>The number of nodes in the list is <code>n</code>.</li>
	<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= Node.val &lt;= 100</code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        return self.constantspace(head, k)

    # Time Complexity: O(n)
    # Space Complexity: O(n)
    def extraspace(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        arr = []
        cur = head

        while cur:
            arr.append(cur.val)
            cur = cur.next

        n = len(arr)
        arr[k - 1], arr[n - k] = arr[n - k], arr[k - 1]

        newHead = ListNode()
        cur = newHead
        for i in range(n):
            cur.next = ListNode(arr[i])
            cur = cur.next

        return newHead.next

    # Time Complexity: O(n)
    # Space Complexity: O(1)
    def constantspace(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        cur = head
        N1 = None
        n = 0
        while cur is not None:
            if n == k - 1:
                N1 = cur
            cur = cur.next
            n += 1

        cur = head
        i = 0
        while cur is not None:
            if i == n - k:
                N2 = cur
                break
            cur = cur.next
            i += 1
        N1.val, N2.val = N2.val, N1.val

        return head

```