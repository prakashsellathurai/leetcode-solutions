# 11-container-with-most-water


Try it on <a href='https://leetcode.com/problems/11-container-with-most-water'>leetcode</a>

## Description
<div class="description">
<div><p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>

<p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p>

<p>Return <em>the maximum amount of water a container can store</em>.</p>

<p><strong>Notice</strong> that you may not slant the container.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" style="width: 600px; height: 287px;">
<pre><strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]
<strong>Output:</strong> 49
<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> height = [1,1]
<strong>Output:</strong> 1
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>n == height.length</code></li>
	<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def maxArea(self, height: List[int]) -> int:
        return self.twopointer(height)

    # Time Complexity: O(n^2)
    # Space Complexity: O(1)
    def bruteforce(self, height: List[int]) -> int:
        n = len(height)
        maxArea = 0

        for i in range(n):
            for j in range(i + 1, n):
                area = (j - i) * min(height[j], height[i])

                if area > maxArea:
                    maxArea = area
        return maxArea

    # Time Complexity: O(n)
    # Space Complexity" O(1)
    def twopointer(self, height: List[int]) -> int:
        n = len(height)
        left, right = 0, n - 1

        maxArea = 0
        while left < right:
            area = (right - left) * min(height[left], height[right])
            if area > maxArea:
                maxArea = area

            if height[left] < height[right]:
                left += 1
            else:
                right -= 1

        return maxArea

```