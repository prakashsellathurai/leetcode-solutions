# 743-network-delay-time


Try it on <a href='https://leetcode.com/problems/743-network-delay-time'>leetcode</a>

## Description
<div class="description">
<div><p>You are given a network of <code>n</code> nodes, labeled from <code>1</code> to <code>n</code>. You are also given <code>times</code>, a list of travel times as directed edges <code>times[i] = (u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>)</code>, where <code>u<sub>i</sub></code> is the source node, <code>v<sub>i</sub></code> is the target node, and <code>w<sub>i</sub></code> is the time it takes for a signal to travel from source to target.</p>

<p>We will send a signal from a given node <code>k</code>. Return the time it takes for all the <code>n</code> nodes to receive the signal. If it is impossible for all the <code>n</code> nodes to receive the signal, return <code>-1</code>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png" style="width: 217px; height: 239px;">
<pre><strong>Input:</strong> times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
<strong>Output:</strong> 2
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> times = [[1,2,1]], n = 2, k = 1
<strong>Output:</strong> 1
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> times = [[1,2,1]], n = 2, k = 2
<strong>Output:</strong> -1
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= k &lt;= n &lt;= 100</code></li>
	<li><code>1 &lt;= times.length &lt;= 6000</code></li>
	<li><code>times[i].length == 3</code></li>
	<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>
	<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>
	<li><code>0 &lt;= w<sub>i</sub> &lt;= 100</code></li>
	<li>All the pairs <code>(u<sub>i</sub>, v<sub>i</sub>)</code> are <strong>unique</strong>. (i.e., no multiple edges.)</li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        return self.dijikstra(times, n, k)

    # Time Complexity: O((N-1)!+E log E)
    # Space COmplexity: O(N+E)
    def dfs(self, times: List[List[int]], n: int, k: int) -> int:
        adj = defaultdict(list)
        for x, y, z in times:
            adj[x].append((y, z))

        times.sort(key=lambda time: time[2])
        signalReceivedAt = [sys.maxsize] * (n)

        def recur(node, currTime):
            if currTime >= signalReceivedAt[node - 1]:
                return
            signalReceivedAt[node - 1] = currTime
            for y, w in adj[node]:
                recur(y, currTime + w)

        recur(k, 0)

        max_ = max(signalReceivedAt)
        return max_ if max_ < sys.maxsize else -1

    # Time Complexity: O(N*E)
    # Space COmplexity: O(N+E)
    def bfs(self, times: List[List[int]], n: int, k: int) -> int:
        adj = defaultdict(list)
        for x, y, z in times:
            adj[x].append((y, z))

        signalReceivedAt = [sys.maxsize] * (n)
        q = deque([k])
        signalReceivedAt[k - 1] = 0
        while q:
            node = q.popleft()
            for y, w in adj[node]:
                arrivalTime = signalReceivedAt[node - 1] + w
                if arrivalTime < signalReceivedAt[y - 1]:
                    signalReceivedAt[y - 1] = arrivalTime
                    q.append(y)

        max_ = max(signalReceivedAt)
        return max_ if max_ < sys.maxsize else -1

    # Time Complexity: O(N+ElogE)
    # Space COmplexity: O(N+E)
    def dijikstra(self, times: List[List[int]], n: int, k: int) -> int:
        adj = defaultdict(list)
        for x, y, z in times:
            adj[x].append((y, z))

        visited = set()
        pq = [(0, k)]
        heapq.heapify(pq)
        maxcost = 0
        while pq:
            cost, node = heapq.heappop(pq)
            if node in visited:
                continue
            if cost > maxcost:
                maxcost = cost
            visited.add(node)

            for y, w in adj[node]:
                newcost = cost + w
                if y not in visited:
                    heapq.heappush(pq, (newcost, y))

        return maxcost if n == len(visited) else -1

```