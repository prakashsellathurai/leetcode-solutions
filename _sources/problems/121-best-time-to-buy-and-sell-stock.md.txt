# 121-best-time-to-buy-and-sell-stock


Try it on <a href='https://leetcode.com/problems/121-best-time-to-buy-and-sell-stock'>leetcode</a>

## Description
<div class="description">
<div><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>

<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p>

<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> prices = [7,1,5,3,6,4]
<strong>Output:</strong> 5
<strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> prices = [7,6,4,3,1]
<strong>Output:</strong> 0
<strong>Explanation:</strong> In this case, no transactions are done and the max profit = 0.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        return self.optimized(prices)

    """
    Time Complexity: O(n^2)
    Space Complexity: O(1)
    """

    def bruteforce(self, prices: List[int]) -> int:
        n = len(prices)
        maxProfit = 0
        for i in range(n):
            for j in range(i + 1, n):
                if prices[j] - prices[i] > maxProfit:
                    maxProfit = prices[j] - prices[i]

        return maxProfit

    """
    Time Complexity: O(n)
    Space Complexity: O(1)
    """

    def optimized(self, prices: List[int]) -> int:
        buyPrice = float("inf")
        profit = 0

        for sellprice in prices:
            if sellprice < buyPrice:
                buyPrice = sellprice
            elif sellprice - buyPrice > profit:
                profit = sellprice - buyPrice
        return profit

```