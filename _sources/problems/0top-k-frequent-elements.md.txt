# 0top-k-frequent-elements


Try it on <a href='https://leetcode.com/problems/0top-k-frequent-elements'>leetcode</a>

## Description
<div class="description">
<div><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>

<p>&nbsp;</p>
<p><strong class="example">Example 1:</strong></p>
<pre><strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2
<strong>Output:</strong> [1,2]
</pre><p><strong class="example">Example 2:</strong></p>
<pre><strong>Input:</strong> nums = [1], k = 1
<strong>Output:</strong> [1]
</pre>
<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>
	<li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li>
	<li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>
</ul>

<p>&nbsp;</p>
<p><strong>Follow up:</strong> Your algorithm's time complexity must be better than <code>O(n log n)</code>, where n is the array's size.</p>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        return self.bucketsort(nums, k)
    
    # Time Complexity: O(nlogn)    
    def naive(self, nums: List[int], k: int) -> List[int]:
        freqmap = Counter(nums)
        sorted_freq = sorted(freqmap.keys(),key=freqmap.get,reverse=True)
        return sorted_freq[:k]
    
    # Time Complexity: O(nlogk)   
    def better(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        
        if k == n:
            return nums
        freq_map = Counter(nums)
        return heapq.nlargest(k, freq_map.keys(),key=freq_map.get)
    
    # Time Complexity: O(n)  
    def bucketsort(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        buckets = [[] for _ in range(n+1)]
        freq_map = Counter(nums)
        
        for num in freq_map:
            buckets[freq_map[num]].append(num)
            
        buckets = [val for bucket in buckets for val in bucket]
        return buckets[-k:]
```