# 132-palindrome-partitioning-ii


Try it on <a href='https://leetcode.com/problems/132-palindrome-partitioning-ii'>leetcode</a>

## Description
<div class="description">
<div><p>Given a string <code>s</code>, partition <code>s</code> such that every substring of the partition is a palindrome.</p>

<p>Return <em>the minimum cuts needed</em> for a palindrome partitioning of <code>s</code>.</p>

<p>&nbsp;</p>
<p><strong>Example 1:</strong></p>

<pre><strong>Input:</strong> s = "aab"
<strong>Output:</strong> 1
<strong>Explanation:</strong> The palindrome partitioning ["aa","b"] could be produced using 1 cut.
</pre>

<p><strong>Example 2:</strong></p>

<pre><strong>Input:</strong> s = "a"
<strong>Output:</strong> 0
</pre>

<p><strong>Example 3:</strong></p>

<pre><strong>Input:</strong> s = "ab"
<strong>Output:</strong> 1
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 2000</code></li>
	<li><code>s</code> consists of lowercase English letters only.</li>
</ul>
</div>
</div>

## Solution(Python)
```Python
class Solution:
    def minCut(self, s: str) -> int:
        n = len(s)
        @cache
        def isPlaindrome(i,j):
            if i >= j:
                return True
            if s[i] != s[j]:
                return False
            return isPlaindrome(i+1,j-1)
        @cache
        def dfs(i):
            if i == n:
                return 0
            
            res = float('inf')
            
            for j in range(i,n):
                if isPlaindrome(i,j):
                    res = min(res, 1+dfs(j+1))
            return res
        return dfs(0) - 1
            
```